<div id="support_content" class="content">

          <div name="welcome" data-unique="welcome"></div><h1 id="welcome">Welcome</h1>
<p>SupportKit adds beautifully simple messaging to your app to keep your users engaged and coming back. If you want to learn more about SupportKit, then visit our website at <a href="http://supportkit.io">http://supportkit.io</a> or <a href="https://app.supportkit.io">sign up here</a>. This page provides in-depth documentation on SupportKit’s features and is meant to be a guide for developers integrating the SDK and app makers seeking to engage with their users.</p>

<p>Source code examples are provided for all of our SDKs, including both Objective-C and Swift for iOS. You can view code examples inline, and you can switch the programming language of the examples with the tabs in the top left.</p>

<p>If you have any other questions, feel free to reach out to us <a href="mailto:help@supportkit.io">here</a>.</p>

          <div name="references" data-unique="references"></div><h1 id="references">References</h1>
<p>For more in-depth details on SupportKit’s APIs <span class="search-highlight">check</span> out our API Reference documentation. The API reference documents every method and property available through SupportKit.</p>

<ul>
<li><a href="http://docs.supportkit.io/api/ios" target="_blank">iOS SDK Reference</a></li>
<li><a href="http://docs.supportkit.io/api/android" target="_blank">Android SDK Reference</a></li>
<li><a href="https://github.com/supportkit/supportkit-js" target="_blank">Web SDK Reference</a></li>
<li><a href="/rest" target="_blank">REST API</a></li>
</ul>

          <div name="adding-supportkit-to-your-site" data-unique="adding-supportkit-to-your-site"></div><h1 id="adding-supportkit-to-your-site">Adding SupportKit to your site</h1>
<p>There are a few ways you can include the SupportKit plugin on your web page.</p>

<p>The recommended method is the Script Tag method, but you can also include it using bower or npm.</p>
<div name="script-tag-method" data-unique="script-tag-method"></div><h2 id="script-tag-method">Script Tag Method</h2><h4 id="step-1-include-the-supportkit-plugin-on-your-web-page">Step 1: Include the SupportKit plugin on your web page</h4>
<p>Add the following code towards the end of the <code class="prettyprint">body</code> section on your page. Placing it at the end allows the rest of the page to load first.</p>
<pre class="highlight html"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.supportkit.io/supportkit.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre>

<p></p><aside class="info">
    Note that SupportKit requires jQuery to work. If you aren’t using jQuery yet, then add the following code before the previous code snippet.<br>
    <code class="prettyprint">
    &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"&gt;&lt;/script&gt;
</code>
</aside><p></p>
<h4 id="step-2-initialize-supportkit-with-your-new-app-token">Step 2: Initialize SupportKit with your new app token</h4>
<p>Once SupportKit has been included on your web page, you’re almost done. Simply initialize the plugin using this code snippet</p>
<pre class="highlight html"><code><span class="nt">&lt;script&gt;</span>
    <span class="nx">SupportKit</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span><span class="na">appToken</span><span class="p">:</span> <span class="s1">'your_app_token'</span><span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>
<div name="npm-and-browserify" data-unique="npm-and-browserify"></div><h2 id="npm-and-browserify">npm and browserify</h2><pre class="highlight plaintext"><code>npm install supportkit
</code></pre>

<p>In your code:</p>
<pre class="highlight javascript" style="display: block;"><code><span class="kd">var</span> <span class="nx">SupportKit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'supportkit'</span><span class="p">);</span>

<span class="nx">SupportKit</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span><span class="na">appToken</span><span class="p">:</span> <span class="s1">'your_app_token'</span><span class="p">});</span>
</code></pre>
<div name="bower" data-unique="bower"></div><h2 id="bower">bower</h2><pre class="highlight plaintext"><code>bower install supportkit
</code></pre>

<p>In your code:</p>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span><span class="na">appToken</span><span class="p">:</span> <span class="s1">'your_app_token'</span><span class="p">});</span>
</code></pre>

          <div name="users" data-unique="users"></div><h1 id="users">Users</h1>
          <div name="user-data" data-unique="user-data"></div><h2 id="user-data">User data</h2>
<p>SupportKit allows you to specify profile information about your users so that you can better understand the context around a user’s message. </p>

          <p>You can set the sender’s properties by initializing SupportKit with a user object.</p>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
    <span class="na">appToken</span><span class="p">:</span> <span class="s1">'your_app_token'</span><span class="p">,</span>
    <span class="na">givenName</span><span class="p">:</span> <span class="s1">'Doctor'</span><span class="p">,</span>
    <span class="na">surname</span><span class="p">:</span> <span class="s1">'Who?'</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="s1">'the-doctor@supportkit.io'</span><span class="p">,</span>
    <span class="na">properties</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'customProp'</span><span class="p">:</span> <span class="s1">'whatever you please'</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre>

<p>You can specify any user property you need, and they’re all optional. So the object you pass into init could also look as simple as
<code class="prettyprint">
{appToken: "your_app_token", givenName: "Trogdor"}
</code></p>

          <p></p><aside class="notice">
Note: The maximum size for a property key is 100 bytes and the maximum property string value is 800 bytes. User keys and string values that exceed these limits will be truncated.
</aside><p></p>

          <div name="sensitive-user-data" data-unique="sensitive-user-data"></div><h2 id="sensitive-user-data">Sensitive user data</h2>
<p>SupportKit sends messages using standard encryption protocols, but in order to keep your users completely safe, the best way is to inform your users they should never send sensitive data through SupportKit messages, for example: credit card numbers, passwords, sensitive documents, and private photos.</p>

          <p>SupportKit allows you to identify new users on the fly, engage with them in a single conversation thread across multiple devices, and associate user and device profile information so that you can better understand the context of a user’s message.</p>
<div name="users-on-multiple-devices" data-unique="users-on-multiple-devices"></div><h2 id="users-on-multiple-devices">Users on multiple devices</h2>
<p>You may have users using your app on multiple devices. For example, suppose they have your app installed on both their iPhone and their iPad. You might also have SupportKit integrated in both your mobile app as well as on your web site.</p>

<p>If you want the user to see the same conversation across devices you can do so by assigning your users a <code class="prettyprint">userId</code>. This will link a user across all devices and platforms that have integrated with your SupportKit app. Specifying a <code class="prettyprint">userId</code> also facilitates <a href="#securing-your-users">user authentication</a>.</p>

<p>The <code class="prettyprint">userId</code> is a string that can be an email, GUID, or an existing ID from your own user directory. The <code class="prettyprint">userId</code> must be unique within a given SupportKit app, and it will only link devices within a single SupportKit app.</p>

<p></p><aside class="warning">
<strong>Caution:</strong> If you’re specifying a <code class="prettyprint">userId</code> then in order to keep conversations private we strongly suggest <a href="#securing-your-users">securing your users</a>. If a <code class="prettyprint">userId</code> is used without a JWT credential, then anyone who can discover a user’s <code class="prettyprint">userId</code> could potentially eavesdrop on the conversation.
</aside><p></p>

<p>After SupportKit has been initialized, you can set the <code class="prettyprint">userId</code> using the <code class="prettyprint">login</code> API:</p>
<pre class="highlight objective_c" style="display: none;"><code><span class="p">[</span><span class="n">SupportKit</span> <span class="nf">login</span><span class="p">:</span><span class="n">yourUserId</span> <span class="nf">jwt</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</code></pre>
<pre class="highlight swift" style="display: none;"><code><span class="kt">SupportKit</span><span class="o">.</span><span class="nf">login</span><span class="p">(</span><span class="n">yourUserId</span><span class="p">,</span> <span class="nv">jwt</span><span class="p">:</span><span class="kc">nil</span><span class="p">)</span>
</code></pre>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">login</span><span class="p">(</span><span class="nx">yourUserId</span><span class="p">);</span>
</code></pre>
<pre class="highlight java" style="display: none;"><code><span class="n">SupportKit</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">yourUserId</span><span class="o">);</span>
</code></pre>

<p>In most use cases SupportKit is initialized synchronously as your app loads. For this reason, once you’ve set your user’s <code class="prettyprint">userId</code> for the first time it is recommended that you store that <code class="prettyprint">userId</code> locally on the device so that it does not need to be fetched again the next time the user opens the app. If your app knows the <code class="prettyprint">userId</code> at app boot time, instead of calling <code class="prettyprint">login</code> you can specify the <code class="prettyprint">userId</code> during SupportKit initialization like so:</p>
<pre class="highlight objective_c" style="display: none;"><code><span class="n">SKTSettings</span><span class="o">*</span> <span class="n">settings</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKTSettings</span> <span class="nf">settingsWithAppToken</span><span class="p">:</span><span class="s">@"YOUR_APP_TOKEN"</span><span class="p">];</span>
<span class="n">settings</span><span class="p">.</span><span class="n">userId</span> <span class="o">=</span> <span class="n">yourUserId</span><span class="p">;</span>
<span class="p">[</span><span class="n">SupportKit</span> <span class="nf">initWithSettings</span><span class="p">:</span><span class="n">settings</span><span class="p">];</span>
</code></pre>
<pre class="highlight swift" style="display: none;"><code><span class="k">var</span> <span class="nv">settings</span> <span class="o">=</span> <span class="kt">SKTSettings</span><span class="p">(</span><span class="nv">appToken</span><span class="p">:</span> <span class="s">"YOUR_APP_TOKEN"</span><span class="p">)</span>
<span class="n">settings</span><span class="o">.</span><span class="n">userId</span> <span class="o">=</span> <span class="n">yourUserId</span>
<span class="kt">SupportKit</span><span class="o">.</span><span class="nf">initWithSettings</span><span class="p">(</span><span class="n">settings</span><span class="p">)</span>
</code></pre>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
    <span class="na">appToken</span><span class="p">:</span> <span class="s1">'YOUR_APP_TOKEN'</span><span class="p">,</span>
    <span class="na">userId</span><span class="p">:</span> <span class="nx">yourUserId</span>
<span class="p">});</span>
</code></pre>
<pre class="highlight java" style="display: none;"><code><span class="n">Settings</span> <span class="n">settings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Settings</span><span class="o">(</span><span class="s">"YOUR_APP_TOKEN"</span><span class="o">);</span>
<span class="n">settings</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="n">yourUserId</span><span class="o">);</span>
<span class="n">SupportKit</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">settings</span><span class="o">);</span>
</code></pre>
<h3 id="omitting-the-userid">Omitting the userId</h3>
<p>SupportKit will work perfectly fine without a <code class="prettyprint">userId</code>. Profile information can still be included but the user will only be able to access the conversation from the device they’re currently using. This means that even if you specify the same profile information, if the same individual opens SupportKit on a new device, or runs your web app in an incognito browser session, they will see a newly created empty conversation when they open SupportKit. Only the <code class="prettyprint">userId</code> can be used to synchronize a conversation across devices.</p>

<p>A <code class="prettyprint">userId</code> can also be omitted at first and added at a later time. If you deploy an update to your app that assigns an existing user with a new <code class="prettyprint">userId</code> that they didn’t have before, any existing conversation history they have will be preserved and their messages will start being synchronized across all devices where that <code class="prettyprint">userId</code> is being used. This is particularly useful if a user opens SupportKit and starts a conversation before having logged in to your app.</p>
<h3 id="switching-users">Switching users</h3>
<p>If your app allows a shared device to switch between multiple user identities you can call the <code class="prettyprint">login</code> API multiple times to switch between different <code class="prettyprint">userId</code>s.</p>
<h4 id="logging-out">Logging out</h4>
<p>Your app may have a logout function which brings users back to a login screen. In this case you would want to revert SupportKit to a pre-login state. You can do this by calling the <code class="prettyprint">logout</code> API.</p>

<p>Calling <code class="prettyprint">logout</code> will disconnect your user from any <code class="prettyprint">userId</code> they were previously logged in with and it will remove any conversation history stored on the device. Logging out will <em>not</em> disable SupportKit. While logged out, the user is free to start a new conversation but they will show up as if <code class="prettyprint">userId</code> was <a href="#omitting-the-userid">omitted</a> during SupportKit initialization.</p>
<pre class="highlight objective_c" style="display: none;"><code><span class="p">[</span><span class="n">SupportKit</span> <span class="nf">logout</span><span class="p">];</span>
</code></pre>
<pre class="highlight swift" style="display: none;"><code><span class="kt">SupportKit</span><span class="o">.</span><span class="nf">logout</span><span class="p">()</span>
</code></pre>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">logout</span><span class="p">();</span>
</code></pre>
<pre class="highlight java" style="display: none;"><code><span class="n">SupportKit</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span>
</code></pre>

          <div name="authenticating-users-optional" data-unique="authenticating-users-optional"></div><h2 id="authenticating-users-optional">Authenticating users (optional)</h2>
<p>Provided you’re <a href="#users-on-multiple-devices">assigning <code class="prettyprint">userId</code>s to your users</a>, you can authenticate users to SupportKit by issuing signed <a href="http://jwt.io">JSON web token</a> (JWT) credentials. This option requires your app to be connected to your own secure web service, or to a 3rd party equivalent such as <a href="https://parse.com">parse.com</a>. There are JWT libraries available supporting a wide variety of popular languages and platforms.</p>

<p>To issue JWTs:</p>

<ol>
<li><p>Generate a secret key for your SupportKit app. You can do this from the <a href="https://app.supportkit.io">SupportKit dashboard</a> under the Settings tab.</p>

<p><img alt="Secret Keys" src="../images/secret_keys.png"></p></li>
<li><p>Implement server side code to sign new JWTs using the key ID and secret provided. The JWT header must specify the key ID (<code class="prettyprint">kid</code>). The JWT body must specify a <code class="prettyprint">scope</code> of ‘appUser’ and the <code class="prettyprint">userId</code> you’ve assigned to the app user.</p>

<p>A node.js sample is provided below:</p>
<pre class="highlight plaintext"><code>var jwt = require('jsonwebtoken');
var KEY_ID = '55e9f9bf7a0ce5ca2d429c17';
var SECRET = 'BFJJ88naxc5PZNAMU9KpBNTR';

var signJwt = function(userId) {
    return jwt.sign({
        scope: 'appUser',
        userId: userId
    },
    SECRET,
    {
        headers: {
            kid: KEY_ID
        }
    });
}
</code></pre></li>
<li><p>Issue a JWT for each user. You should tie-in the generation and delivery of this JWT with any existing user login process used by your app.</p></li>
<li><p>Specify the JWT when calling <code class="prettyprint">login</code> on the client:</p>
<pre class="highlight objective_c" style="display: none;"><code><span class="p">[</span><span class="n">SupportKit</span> <span class="nf">login</span><span class="p">:</span><span class="n">yourUserId</span> <span class="nf">jwt</span><span class="p">:</span><span class="n">yourJwt</span><span class="p">];</span>
</code></pre>
<pre class="highlight swift" style="display: none;"><code><span class="kt">SupportKit</span><span class="o">.</span><span class="nf">login</span><span class="p">(</span><span class="n">yourUserId</span><span class="p">,</span> <span class="nv">jwt</span><span class="p">:</span><span class="n">yourJwt</span><span class="p">)</span>
</code></pre>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">login</span><span class="p">(</span><span class="nx">yourUserId</span><span class="p">,</span> <span class="nx">yourJwt</span><span class="p">);</span>
</code></pre>
<pre class="highlight java" style="display: none;"><code><span class="n">SupportKit</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">yourUserId</span><span class="o">,</span> <span class="n">yourJwt</span><span class="o">);</span>
</code></pre></li>
</ol>

<p>Securing a <code class="prettyprint">userId</code> happens automatically by using a JWT for the first time. Once a JWT is used to authenticate an individual <code class="prettyprint">userId</code> with SupportKit, that specific <code class="prettyprint">userId</code> will require a JWT credential in all future init or login calls made to SupportKit.</p>

<p>Once you’ve issued a <code class="prettyprint">userId</code> and <code class="prettyprint">JWT</code> to a user for the first time you can save them to the device locally. Having done this, instead of making a separate call to <code class="prettyprint">login</code> you can provide SupportKit with the <code class="prettyprint">userId</code> and <code class="prettyprint">JWT</code> parameters during app initialization:</p>
<pre class="highlight objective_c" style="display: none;"><code><span class="n">SKTSettings</span><span class="o">*</span> <span class="n">settings</span> <span class="o">=</span> <span class="p">[</span><span class="n">SKTSettings</span> <span class="nf">settingsWithAppToken</span><span class="p">:</span><span class="s">@"YOUR_APP_TOKEN"</span><span class="p">];</span>
<span class="n">settings</span><span class="p">.</span><span class="n">userId</span> <span class="o">=</span> <span class="n">yourUserId</span><span class="p">;</span>
<span class="n">settings</span><span class="p">.</span><span class="n">jwt</span> <span class="o">=</span> <span class="n">yourJwt</span><span class="p">;</span>
<span class="p">[</span><span class="n">SupportKit</span> <span class="nf">initWithSettings</span><span class="p">:</span><span class="n">settings</span><span class="p">];</span>
</code></pre>
<pre class="highlight swift" style="display: none;"><code><span class="k">var</span> <span class="nv">settings</span> <span class="o">=</span> <span class="kt">SKTSettings</span><span class="p">(</span><span class="nv">appToken</span><span class="p">:</span> <span class="s">"YOUR_APP_TOKEN"</span><span class="p">)</span>
<span class="n">settings</span><span class="o">.</span><span class="n">userId</span> <span class="o">=</span> <span class="n">yourUserId</span>
<span class="n">settings</span><span class="o">.</span><span class="n">jwt</span> <span class="o">=</span> <span class="n">yourJwt</span>
<span class="kt">SupportKit</span><span class="o">.</span><span class="nf">initWithSettings</span><span class="p">(</span><span class="n">settings</span><span class="p">)</span>
</code></pre>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
    <span class="na">appToken</span><span class="p">:</span> <span class="s1">'YOUR_APP_TOKEN'</span><span class="p">,</span>
    <span class="na">userId</span><span class="p">:</span> <span class="nx">yourUserId</span><span class="p">,</span>
    <span class="na">jwt</span><span class="p">:</span> <span class="nx">yourJwt</span>
<span class="p">});</span>
</code></pre>
<pre class="highlight java" style="display: none;"><code><span class="n">Settings</span> <span class="n">settings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Settings</span><span class="o">(</span><span class="s">"YOUR_APP_TOKEN"</span><span class="o">);</span>
<span class="n">settings</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="n">yourUserId</span><span class="o">);</span>
<span class="n">settings</span><span class="o">.</span><span class="na">setJWT</span><span class="o">(</span><span class="n">yourJwt</span><span class="o">);</span>
<span class="n">SupportKit</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">settings</span><span class="o">);</span>
</code></pre>

<p></p><aside class="warning">
If your secret key is ever compromised you can generate a new one. SupportKit will accept a JWT as long as it contains all required fields and is signed with any of your SupportKit app’s valid secret keys. Deleting a secret key will invalidate all JWTs that were signed with it.
</aside><p></p>

          <div name="sending-action-buttons" data-unique="sending-action-buttons"></div><h1 id="sending-action-buttons">Sending action buttons</h1>
<p>You can send your users an action button with the following syntax:</p>
<pre class="highlight plaintext"><code>%[Button label here](http://anyurl.com)
</code></pre>

<p>This works from any channel you configured to use with SupportKit. </p>

<p>When the user taps your button, it’ll open whatever link you specified in a new tab. </p>

<p><span class="half-width-img"><img alt="Action buttons" src="../images/action_button_web.png"></span></p>

<p></p><aside class="notice">
Buttons will always be appended at the bottom of your message bubble.
</aside><p></p>

          <div name="integrations" data-unique="integrations"></div><h1 id="integrations">Integrations</h1>
          <div name="email" data-unique="email"></div><h2 id="email">Email</h2>
<p>By default, all new SupportKit apps will have an email channel enabled using the email address of the account owner.</p>

<p>When users send you a message using SupportKit, you will receive an email at the configured address(es). This e-mail contains the user’s message, device information, and any profile information about the user that you captured in your app. You can respond to your user’s message by responding directly to the email.</p>

<p><img src="/images/email_with_context.png" alt="Drawing" style="width: 80%;"></p>
<h3 id="getting-help-from-your-team">Getting help from your team</h3>
<p>If you want multiple team members to respond to your SupportKit requests, you can specify multiple email addresses, or use a mailing list. Whenever a team member replies, the incoming email address and associated name will be used to determine the team member displayed to the user alongside the message.</p>

          <div name="slack" data-unique="slack"></div><h2 id="slack">Slack</h2>
<p>Slack is a communication tool that combines the best things about chat, email and the web to group all of your team’s conversations and workflow into one beautiful, searchable place.</p>

<p>SupportKit has a Slack integration that allows your team to effortlessly speak to your app’s users, without leaving Slack. <span class="search-highlight">Check</span> out this video to see how it works:</p>

<iframe style="margin-left:42px;" src="//player.vimeo.com/video/117524819?color=a02b8f&amp;byline=0&amp;portrait=0" width="500" height="281" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<h3 id="configuring-slack">Configuring Slack</h3><h4 id="step-1--quotauthorizifyquot-supportkit-so-that-it-can-talk-to-your-slack">Step 1. “Authorizify” SupportKit so that it can talk to your Slack</h4><h4 id="step-2--set-up-a-new-quotslash-commandquot-so-that-you-can-send-messages-to-supportkit">Step 2. Set up a new “slash command” so that you can send messages to SupportKit</h4>
<p><img src="/images/slashcmd.png" alt="Slash Command Setup"></p>

<p></p><aside class="notice">
Make sure you remember to fill in the “Token” field of the form in Step 2 with the token that Slack’s slash command setup page provides you.
</aside><p></p>
<h4 id="step-3--choose-a-quotdispatch-channelquot-to-receive-new-message-notifications-from-your-app39s-users">Step 3. Choose a “dispatch channel” to receive new message notifications from your app’s users</h4>
<p>Once you’ve completed these 3 steps, you’re ready to start speaking to your users with Slack.</p>

<p>When users send you messages, SupportKit posts them to Slack. If it’s a new conversation, a notification will appear in the dispatch channel.</p>

<p>This notification contains a link to a channel associated to the specific user that sent you the message. From this channel you can get more information on the user and reply to their questions.</p>

<p>The messages you send in this channel are not automatically sent to your user. We do this so that you can invite teammates to read and collaborate on the user’s issue, without exposing your internal conversation.</p>

<p>When you’re ready to send a message to the user, simply use SupportKit’s slash command:</p>
<pre class="highlight plaintext"><code>/sk TYPE YOUR MESSAGE HERE
</code></pre>

<p>This command will make SupportKit send your message directly to the app user. You’ll get a notification in the channel confirming that the transmission was successful.</p>

<p>If you want to consult any metadata you’ve associated with the user in order to aid the help process, simply use the command below to instruct SupportKit to display the most up to date metadata on a user.</p>
<pre class="highlight plaintext"><code>/sk !profile
</code></pre>

<p><a href="#identifying-users">This section</a> how to associate profile information about users.</p>

          <div name="help-scout" data-unique="help-scout"></div><h2 id="help-scout">Help Scout</h2>
<p><a href="http://www.helpscout.net/">Help Scout</a> is a scalable, elegant and intuitive help desk solution. By connecting SupportKit to Help Scout, you can manage in-app conversations you have with your users directly from Help Scout. This way, you can use the same system to handle your team’s e-mail and in-app support channels. Unlike other Help Scout conversations, agent replies in conversations initiated by SupportKit app users won’t be sent by email, instead they will appear directly in the app.</p>
<h3 id="configuring-help-scout-to-work-with-supportkit">Configuring Help Scout to work with SupportKit</h3>
<p>Configuring Help Scout is super easy. All you have to do is copy/paste a Help Scout API key into our integration page.</p>

<ol>
<li><p>Log in to your Help Scout account, go to “Your Profile” -&gt; “API Keys” and generate an API key. </p></li>
<li><p>On the Help Scout page in your SupportKit admin, paste the API key into the field that says “Paste API Key here.”</p></li>
<li><p>Now, pick the mailbox you want to recieve app user messages in, and next time one of your users messages you using SupportKit, the conversation will appear in the Help Scout mailbox.</p></li>
</ol>

<p><img style="width:50%; min-width:400px; max-width:800px;" src="/images/helpscout_settings.png" alt="Configure Help Scout integration page"></p>
<h3 id="instant-messaging-from-a-help-scout-mailbox">Instant messaging from a Help Scout mailbox</h3>
<p>You can change or delete the Help Scout mailbox that SupportKit sends messages to, but you should note that conversations will not automatically migrate to the new mailbox. You must move the conversations you wish to have in the new mailbox via the Help Scout UI. Otherwise they will continue in the previously configured mailbox. Update your settings before deleting a Help Scout mailbox. If the mailbox configured on SupportKit no longer exists, messages will be lost.</p>

          <div name="zendesk" data-unique="zendesk"></div><h2 id="zendesk">Zendesk</h2>
<p>Zendesk is a CRM platform specialized in managing support tickets. Our Zendesk integration combines all the advantages of in-app messaging with a powerful CRM back-end.</p>
<h3 id="configuring-zendesk-ticketing">Configuring Zendesk ticketing</h3>
<p>Configuring SupportKit to communicate with Zendesk is easy. Go to your app settings on the SupportKit admin page, and in the Zendesk settings, enter your Zendesk subdomain and click on the authenticate button.</p>

<p><img style="width:50%; min-width:400px; max-width:800px;" src="/images/zendesk_integration.png" alt="Configure Zendesk integration page"></p>

<p>In order to maintain all your interactions with an app user under a single Zendesk End-user profile, it’s important to <a href="#identifying-your-users">set the email</a> of your user in your app’s SupportKit integration.</p>
<h4 id="configuring-agent-images">Configuring agent images</h4>
<p>You can set an agent’s image in your app (as pictured below) by creating a <a href="http://www.gravatar.com/">Gravatar</a> image associated with the agent’s email address.
<img style="width:50%; min-width:200px; max-width:400px;" src="/images/agent_thumb.png" alt="Set agent images"></p>
<h4 id="working-with-zendesk-email-signatures">Working with Zendesk email signatures</h4>
<p>SupportKit automagically removes agent’s personal signatures from messages. Global signatures can be set, but must be prefixed with <code class="prettyprint">--</code>, if they aren’t, you’ll see them appear in SK message bubbles, and it can be unsightly.
<img style="width:50%; min-width:200px; max-width:400px;" src="/images/unsightly_signature.png" alt="Oops, how unsightly"></p>
<h4 id="optional-additional-information-on-configuration">Optional additional information on Configuration</h4>
<p>Once you are authenticated with your Zendesk app, SupportKit will automatically configure targets and triggers so that your Zendesk agents can communicate with your SupportKit app users.</p>

<p>During the configuration process any existing triggers in your Zendesk settings will be modified to not email the End-user if the ticket is tagged “supportkit”. We do this to avoid duplicating the conversation, and to remove any reason for the app user to leave your app to respond via email.</p>

<p>It’s suggested that you don’t modify the targets and triggers that SupportKit configures for you on Zendesk. However, if you do, and anything ever goes wrong, it’s easy to fix. Just return to your app settings on the SupportKit admin page and in the Zendesk settings click “Remove Integration.” Re-adding the integration will remove previously configured SupportKit targets and triggers and refresh your configuration.</p>

<p>Note: SupportKit only ever configures one target and trigger per a Zendesk subdomain. In the event that multiple apps, or even mutliple SupportKit accounts are authorized for a Zendesk subdomain, the triggers and targets will not be removed until all SupportKit apps have had the Zendesk integration removed.</p>
<h3 id="rate-limiting">Rate Limiting</h3>
<p>Zendesk limits each account to 200 requests per a minute (globally). Additionally, they only allow 15 comments to be made on each individual ticket (regardless of whether the comment is an agent or app user) within a 10 minute period.</p>

<p>In the unlikely event that a conversation surpasses the rate limit, the agent will recieve a message in the Zendesk UI saying as much, and preventing the ticket from being updated for a certain period of time, usually around 6 minutes. Your app user’s messages will be queued up and sent after the time period specified by Zendesk.</p>

<p>To reduce the likelihood of you bumping up against the rate limit, SupportKit batches together all messages sent from the app user within a 5 second period into a single comment.</p>

          <div name="connecting-to-your-crm" data-unique="connecting-to-your-crm"></div><h2 id="connecting-to-your-crm">Connecting to your CRM</h2>
<p>SupportKit’s been designed to fit into your existing workflow so you can focus on speaking to your users and take advantage of whatever medium makes you most effective.</p>

<p>In addition to deep integration with <a href="#zendesk">Zendesk</a>, since SupportKit uses e-mail to manage its communication, it’s easy to use your favourite CRM to manage incoming conversations as tickets if you want to benefit from the additional tools this allows.</p>

<ol>
<li><p>Take note of the e-mail address that the CRM uses to receive new support requests.</p></li>
<li><p>Set SupportKit’s forwarding address to the address you noted in step 1. </p></li>
<li><p>Turn off any kind of signatures or annotations in your CRM to ensure that users receive a concise chat bubble when you reply.</p></li>
</ol>

          <div name="getting-conversations-started" data-unique="getting-conversations-started"></div><h1 id="getting-conversations-started">Getting conversations started</h1>
<p>SupportKit allows you to reach out to your users at scale so that you can start conversations with them about anything that matters to your app, even if they aren’t in need of service or support. We call this feature “Whispers” and it allows you to automatically send a message to a targeted group of users at exactly the right time.</p>

<p>To help get you started, we’ve built in 3 basic templates and also allow you to create your own using any custom metadata that you’re capturing with the <code class="prettyprint">SupportKit.init</code> API.</p>

<ul>
<li><p><em>Welcome Whisper</em> : Welcome new users to your app by starting a conversation where you can answer pressing questions and get initial feedback.</p></li>
<li><p><em>Re-Engage Users</em> : Send a message to users who were last seen using the app at least 7 days ago. </p></li>
<li><p><em>Announcement</em> : Send a message to all users when they launch the app.</p></li>
</ul>

<p>You can start from any of these templates and customize it to meet your needs. You can also create a custom Whisper from scratch and go beyond these templates. You can use Whispers to ask for reviews from your most engaged users at the right time, you can notify users of older versions of your app about new versions, and more.</p>
<div name="how-do-whispers-work" data-unique="how-do-whispers-work"></div><h2 id="how-do-whispers-work">How do Whispers work</h2>
<p>You create Whispers from within the <a href="https://app.supportkit.io">SupportKit dashboard</a> by specifying which users should receive your message, the message you’d like to send to your users and the event that should trigger delivery of this message. For example, to create a Whisper that would <span class="search-highlight">check</span> in to see how users are doing 2 days after installing an app, you’d create a custom Whisper with these settings:</p>

<p><img alt="Whisper creation form" src="../images/create_whisper.png"></p>
<h3 id="targeting-a-group-of-users">Targeting a group of users</h3>
<p>You can target your users based on any information that you’ve stored in <code class="prettyprint">properties</code> array first set during <code class="prettyprint">init</code>. We also provide several built-in properties that you can use without instrumenting your app with calls to SupportKit object.</p>

<ul>
<li><p><em>All users</em> : Send the Whisper to <em>everyone</em> that has your app. Whispers that target everyone must be <a href="#when-are-whispers-sent">linked to an event</a>.</p></li>
<li><p><em>Last Seen</em> : Send the message based on when the user last interacted with your app. This value is updated automatically each time a user launches your app.</p></li>
</ul>

<p>In order to create Whispers based on properties you’ve defined using SupportKit object’s <code class="prettyprint">properties</code> array, you’ll need to run your app and ensure that at least 1 of your users was tagged with the property you want to base your Whisper on. For more information on using custom properties, read our <a href="#identifying-your-users">documentation on the subject</a>.</p>
<h3 id="personalizing-the-message-text">Personalizing the message text</h3>
<p>You can personalize the message that’s being sent with the first or last name of the user. To do this, simply use the syntax <code class="prettyprint">{{firstName || fallback }}</code> when creating your message. If the user’s <code class="prettyprint">givenName</code> hasn’t been set by your code through the <code class="prettyprint">init</code> call then the placeholder will be replaced with the string specified as <code class="prettyprint">fallback</code>. </p>

          <div name="when-are-whispers-sent" data-unique="when-are-whispers-sent"></div><h2 id="when-are-whispers-sent">When are Whispers sent</h2>
<p>Whispers can be sent either when a specified event occurs in your app or when a user’s profile information matches the criteria of the target group.</p>

<p>Whispers that are based on custom events defined by you in your app are tied to the execution of the SupportKit <code class="prettyprint">track:</code> method. When <code class="prettyprint">track:</code> is called, SupportKit will <span class="search-highlight">check</span> to see if the associated Whisper has already been seen by this user. If it hasn’t, the Whisper will be immediately presented to the user through an in-app notification that leads to the messaging interface when tapped. When you create a Whisper, SupportKit will display a preview of this in-app notification.</p>
<pre class="highlight java" style="display: none;"><code><span class="n">SupportKit</span><span class="o">.</span><span class="na">track</span><span class="o">(</span><span class="s">"item-in-cart"</span><span class="o">);</span>
</code></pre>
<pre class="highlight javascript" style="display: block;"><code><span class="nx">SupportKit</span><span class="p">.</span><span class="nx">track</span><span class="p">(</span><span class="s1">'item-in-cart'</span><span class="p">);</span>
</code></pre>
<pre class="highlight objective_c" style="display: none;"><code><span class="p">[</span><span class="n">SupportKit</span> <span class="nf">track</span><span class="p">:</span><span class="s">@"user-on-promopage"</span><span class="p">];</span>
</code></pre>
<pre class="highlight swift" style="display: none;"><code><span class="kt">SupportKit</span><span class="o">.</span><span class="nf">track</span><span class="p">(</span><span class="s">"user-on-promopage"</span><span class="p">);</span>
</code></pre>

<p>If the Whisper is not tied to an event, SupportKit will monitor your userbase for changes and dispatch Whispers when a user’s properties make them a fit for the target group of your Whisper. In many cases, this occurs when the user is not using your app. For instance, if you elect to send a Whisper to new users after 1 day has elapsed, SupportKit will deliver the message approximately 24 hours after the user first used your app. If you choose to use this powerful method of Whisper delivery, ensure that you’ve enabled push notifications for your app in SupportKit. With push enabled, your users will receive a message that will bring them back into the conversation, even if they’re not using your app.</p>

<p>Note that users need to be prompted and accept to receive push notifications. To make sure we don’t prompt the user at a bad moment, SupportKit will only request permission to send push notifications after a user sends his first message and only if the prompt wasn’t shown earlier by your app. To get the full power of Whispers, we recommend you prompt for push permission as early as possible.</p>

          <div name="adding-user-actions-to-a-whisper" data-unique="adding-user-actions-to-a-whisper"></div><h2 id="adding-user-actions-to-a-whisper">Adding user actions to a Whisper</h2>
<p>You can prompt your users to take actions by adding action buttons to your Whisper. Clicking on ‘Add an action’ will open up a new input box where you can specify the button text and what action to take when the user clicks on the button.</p>

<p><img alt="Whisper add action" src="../images/whisper_action.png"></p>

<p>For more information on whisper actions, see <a href="#sending-action-buttons">this section</a> of the docs.</p>

          <div name="managing-whispers" data-unique="managing-whispers"></div><h2 id="managing-whispers">Managing Whispers</h2>
<p><img alt="Manage Whispers" src="../images/whisper_manage.png"></p>

<p>Once you’ve created a Whisper you can manage it from within the SupportKit web interface. By clicking on the “Whispers” link in the navigation bar, you’ll be presented with a list of Whispers as well as the number of users who have been exposed to them while running your app.</p>

<p>You can pause Whispers at any time. When you do so, the Whisper will not be shown to any more users until you mark it as active by clicking “Resume”.</p>

      </div>
