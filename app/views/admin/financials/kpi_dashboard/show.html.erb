<div class="financials-dashboard kpi-dashboard">

  <div class="row">
    <div class="columns small-12">
      <p>
      <div class="row title_block">
        <div class="small-4 columns centered">
          <div class="activity-header total-arr">
            <h1 class="header-number" data-kpi="totalArr">
              <%=  simple_format_by_type "money", number_with_delimiter(@totals[:totalArr].to_i, :delimiter => ',') %>
            </h1>
            <span class="header-unit">
              ARR 
            </span>
          </div>
        </div>
        <div class="small-4 columns centered">
          <div class="activity-header total-mrr">
            <h1 class="header-number" data-kpi="totalMrr">
              <%=  simple_format_by_type "money", number_with_delimiter(@totals[:totalMrr].to_i, :delimiter => ',') %>
            </h1>
            <span class="header-unit">
              MRR
            </span>
          </div>
        </div>
        <div class="small-4 columns centered">
          <div class="activity-header total-customers">
            <h1 class="header-number" data-kpi="totalCustomers">
              <%= number_with_delimiter(@totals[:totalCustomers], :delimiter => ',') %>
            </h1>
            <span class="header-unit">
              Customers
            </span>
          </div>
        </div>
      </div>
      </p>
    </div>
  </div>

  <div class="row">
    <div class="columns small-12 small-centered">
      <div id="financials-filter">
        <%=render partial: "/admin/shared/date_range_form", locals:{path: admin_financials_kpi_dashboard_path} %>
      </div>
    </div>
  </div>
 
  <div class="row">
    <div class="columns small-12">
      <p>
      <div class="financial-kpis-graph" id="chart-container" style="width:100%; height:400px;" ></div>
      </p>
    </div>
  </div>

  <div class="tabular-data">
    <%= render "table_with_chart_data" %>
  </div>

</div>
<%content_for :head do %>
<style type="text/css">


.report-filter .pickadate{
  width:105px;
  float: left;
  width: 105px;
  margin-right: 12px;
  margin-bottom: 0;
  padding: 8px 12px;
  line-height: 1;
  font-size: 13px;
  font-weight: 500;
  height: 32px;
  color: #919191;
  border-color: #c4c4c4;
  height: 31px;
}


/* Component styles */
.component {
  line-height: 1.5em;
  margin: 0 auto;
  padding: 2em 0 3em;
  width: 90%;
  max-width: 1000px;
  overflow: hidden;
}


/* For appearance */
.sticky-wrap {
  overflow-x: auto;
  overflow-y: hidden;
  position: relative;
  margin: 3em 0;
  width: 100%;
}
.sticky-wrap .sticky-thead,
.sticky-wrap .sticky-col,
.sticky-wrap .sticky-intersect {
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  transition: all .125s ease-in-out;
  z-index: 50;
  width: auto; /* Prevent table from stretching to full size */
}
.sticky-wrap .sticky-thead {
  box-shadow: 0 0.25em 0.1em -0.1em rgba(0,0,0,.125);
  z-index: 100;
  width: 100%; /* Force stretch */
}
.sticky-wrap .sticky-intersect {
  opacity: 1;
  z-index: 150;

}
.sticky-wrap .sticky-intersect th {
  background-color: #666;
  color: #eee;
}
.sticky-wrap td,
.sticky-wrap th {
  box-sizing: border-box;
}

.sticky-wrap.overflow-y {
  overflow-y: auto;
  max-height: 50vh;
}



</style>

<script>

$(function(){
  $('table.sticky').each(function() {
    if($(this).find('thead').length > 0 && $(this).find('th').length > 0) {
      // Clone <thead>
      var $w	   = $(window),
        $t	   = $(this),
        $thead = $t.find('thead').clone(),
        $col   = $t.find('thead, tbody').clone();

      // Add class, remove margins, reset width and wrap table
      $t
      .addClass('sticky-enabled')
      .css({
        margin: 0,
        width: '100%'
      }).wrap('<div class="sticky-wrap" />');

      if($t.hasClass('overflow-y')) $t.removeClass('overflow-y').parent().addClass('overflow-y');

      // Create new sticky table head (basic)
      $t.after('<table class="sticky-thead" />');

      // If <tbody> contains <th>, then we create sticky column and intersect (advanced)
      if($t.find('tbody th').length > 0) {
        $t.after('<table class="sticky-col" /><table class="sticky-intersect" />');
      }

      // Create shorthand for things
      var $stickyHead  = $(this).siblings('.sticky-thead'),
        $stickyCol   = $(this).siblings('.sticky-col'),
        $stickyInsct = $(this).siblings('.sticky-intersect'),
        $stickyWrap  = $(this).parent('.sticky-wrap');

      $stickyHead.append($thead);

      $stickyCol
      .append($col)
      .find('thead th:gt(0)').remove()
      .end()
      .find('tbody td').remove();

      $stickyInsct.html('<thead><tr><th>'+$t.find('thead th:first-child').html()+'</th></tr></thead>');

      // Set widths
      var setWidths = function () {
        $t
        .find('thead th').each(function (i) {
          $stickyHead.find('th').eq(i).width($(this).width());
        })
        .end()
        .find('tr').each(function (i) {
          $stickyCol.find('tr').eq(i).height($(this).height());
        });

        // Set width of sticky table head
        $stickyHead.width($t.width());

        // Set width of sticky table col
        $stickyCol.find('th').add($stickyInsct.find('th')).width($t.find('thead th').width())
      },
      repositionStickyHead = function () {
        // Return value of calculated allowance
        var allowance = calcAllowance();

        // Check if wrapper parent is overflowing along the y-axis
        if($t.height() > $stickyWrap.height()) {
          // If it is overflowing (advanced layout)
          // Position sticky header based on wrapper scrollTop()
          if($stickyWrap.scrollTop() > 0) {
            // When top of wrapping parent is out of view
            $stickyHead.add($stickyInsct).css({
              opacity: 1,
              top: $stickyWrap.scrollTop()
            });
          } else {
            // When top of wrapping parent is in view
            $stickyHead.add($stickyInsct).css({
              opacity: 0,
              top: 0
            });
          }
        } else {
          // If it is not overflowing (basic layout)
          // Position sticky header based on viewport scrollTop
          if($w.scrollTop() > $t.offset().top && $w.scrollTop() < $t.offset().top + $t.outerHeight() - allowance) {
            // When top of viewport is in the table itself
            $stickyHead.add($stickyInsct).css({
              opacity: 1,
              top: $w.scrollTop() - $t.offset().top
            });
          } else {
            // When top of viewport is above or below table
            $stickyHead.add($stickyInsct).css({
              opacity: 0,
              top: 0
            });
          }
        }
      },
      repositionStickyCol = function () {
        if($stickyWrap.scrollLeft() > 0) {
          // When left of wrapping parent is out of view
          $stickyCol.add($stickyInsct).css({
            opacity: 1,
            left: $stickyWrap.scrollLeft()
          });
        } else {
          // When left of wrapping parent is in view
          $stickyCol
          .css({ opacity: 0 })
          .add($stickyInsct).css({ left: 0 });
        }
      },
      calcAllowance = function () {
        var a = 0;
        // Calculate allowance
        $t.find('tbody tr:lt(3)').each(function () {
          a += $(this).height();
        });

        // Set fail safe limit (last three row might be too tall)
        // Set arbitrary limit at 0.25 of viewport height, or you can use an arbitrary pixel value
        if(a > $w.height()*0.25) {
          a = $w.height()*0.25;
        }

        // Add the height of sticky header
        a += $stickyHead.height();
        return a;
      };

      setWidths();

      $t.parent('.sticky-wrap').scroll($.throttle(250, function() {
        repositionStickyHead();
        repositionStickyCol();
      }));

      $w
      .load(setWidths)
      .resize($.debounce(250, function () {
        setWidths();
        repositionStickyHead();
        repositionStickyCol();
      }))
      .scroll($.throttle(250, repositionStickyHead));
    }
  });
});

</script>

<%end%>
