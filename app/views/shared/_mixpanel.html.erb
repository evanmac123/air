<% if Rails.env.test? %>
  <script type="text/javascript">
    function MixPanelMock() {
      this.track = track;
      this.register = register;
      this.identify = identify;
      this.people = {
        set: function(data) {
        }
      };

      function track(eventString, props) {
      }

      function register(registration) {
      }

      function identify(distinct_id) {
      }
    }
    window.mixpanel = new MixPanelMock();
  </script>
<% elsif Rails.env.development? %>
  <script type="text/javascript">
    function MixPanelMock() {
      this.track = track;
      this.register = register;
      this.identify = identify;
      this.people = {
        set: function(data) {
          console.log("MP Set Client Admin Profile")
          console.log(data);
        }
      };

      function track(eventString, props) {
        console.log("MP Track Event")
        console.log(eventString, props);
      }

      function register(registration) {
        console.log("MP Register Defaults")
        console.log(registration);
      }

      function identify(distinct_id) {
        console.log("MP Client Admin identified with distinct id: " + distinct_id)
      }
    }

    window.mixpanel = new MixPanelMock();
  </script>
<% else %>
  <!-- start Mixpanel -->
  <script type="text/javascript">(function(e,b){if(!b.__SV){var a,f,i,g;window.mixpanel=b;a=e.createElement("script");a.type="text/javascript";a.async=!0;a.src=("https:"===e.location.protocol?"https:":"http:")+'//cdn.mxpnl.com/libs/mixpanel-2.2.min.js';f=e.getElementsByTagName("script")[0];f.parentNode.insertBefore(a,f);b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!== typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");for(g=0;g<i.length;g++)f(c,i[g]); b._i.push([a,e,d])};b.__SV=1.2}})(document,window.mixpanel||[]);
  mixpanel.init("<%= MIXPANEL_TOKEN %>");</script>
  <!-- end Mixpanel -->
<% end %>

<% if current_user.present? %>
  <%= javascript_tag do %>
    mixpanel.register(JSON.parse('<%= (current_user.data_for_mixpanel.merge({ signed_in: signed_in?})).to_json.html_safe %>'));
  <% end %>

  <% if current_user.is_client_admin %>
    <%= javascript_tag do %>
      mixpanel.identify("<%= current_user.mixpanel_distinct_id %>");

      mixpanel.people.set(JSON.parse('<%=
        {
          "$email" => current_user.email,
          "$first_name" => current_user.first_name,
          "$last_name" => current_user.last_name,
        }.to_json.html_safe
      %>'))
    <% end %>
  <% end %>
<% end %>

<%= javascript_tag do %>
  mixpanel.register({
    'device_type': '<%= device_type %>',
    'Current Controller': '<%= params[:controller] %>',
    'Current Path': '<%= request.path %>'
  });
<% end %>
