<%= stylesheet_link_tag 'admin/segmentation' %>

<%= render 'shared/prototype_characteristic_select', :dummy_characteristics => dummy_characteristics, :generic_characteristics => generic_characteristics, :demo_specific_characteristics => demo_specific_characteristics %>

<%= form_tag admin_demo_segmentation_path(demo), :id => 'segmentation-form' do %>
  <fieldset>
    <legend>Look up new segment</legend>
    <div id="segmentation_parameters">
      <div class="segmentation-triple-wrapper">
        <select name="segment_column[0]" id="segment_column_0" class="segment-column">
        </select>
        <select name="segment_operator[0]" id="segment_operator_0" class="segment-operator">
        </select>
        <select name="segment_value[0]" id="segment_value_0" class="segment-value">
        </select>
      </div>
    </div>

    <%= link_to "Segment on more characteristics", "#", :id => "add_more_characteristics" %>
    <%= submit_tag "Find segment" %>
    <%= image_tag "spinner.gif", :style => 'display: none', :id => 'find-segment-spinner' %>
  </fieldset>
<% end %>

<%= content_for :javascript do %>
  <%= javascript_tag do %>
    var characteristicSelectHtml = $('#prototype-characteristic-select').html();
    $('#segment_column_0').append(characteristicSelectHtml).data('value_select_id', 'segment_value_0');

    <% all_characteristics = dummy_characteristics + generic_characteristics + demo_specific_characteristics %>
    var inputSpecifiers = <%= characteristic_input_specifiers_as_json(all_characteristics) %>;
    var allowedOperators = <%= characteristic_allowed_operators_as_json(all_characteristics) %>;

    var nextSegmentationIndex = 1;

    function nameFromDomId(domId) {
      nameParts = domId.split('_');
      index = nameParts.pop();
      return(nameParts.join('_') + '[' + index + ']');
    }

    function idAttribute(domId) {
      return('id="' + domId + '"');
    }

    function nameAttribute(domId) {
      return('name="' + nameFromDomId(domId) + '"');
    }

    function nameAndId(domId) {
      return ([idAttribute(domId), nameAttribute(domId)]).join(' ');
    }

    function createSelectFromInputSpecifier(inputSpecifier, domId) {
      optionHtml = valuesToOptionTags(inputSpecifier.allowed_values);

      return('<select ' + nameAndId(domId) + '>' + optionHtml + '</select>');
    }

    function createTextFieldFromInputSpecifier(inputSpecifier, domId) {
      return('<input type="text" ' + nameAndId(domId) + '>');
    }

    function createCheckboxFromInputSpecifier(inputSpecifier, domId) {
      hiddenField = '<input type="hidden" value="0" ' + nameAttribute(domId) + '>';
      checkboxField = '<input type="checkbox" value="1" ' + nameAndId(domId) + '>';
      return(hiddenField + checkboxField);
    }

    function createInput(inputSpecifier, domId) {
      var creationFunction = null;
      switch(inputSpecifier.field_type) {
        case 'select': creationFunction = createSelectFromInputSpecifier; break;
        case 'text': creationFunction = createTextFieldFromInputSpecifier; break;
        case 'checkbox': creationFunction = createCheckboxFromInputSpecifier; break;
      };
      return creationFunction(inputSpecifier, domId);
    }

    function valuesToOptionTags(values) {
      return $.map(values, function(value) {
               return('<option>' + value + '</option>')
             }).join('');
    }
    
    $('.segment-column').live('change', function(e) {
      characteristicId = $(e.target).val();

      if(characteristicId) {
        enclosingSelectId = enclosingSelect(e.target).attr('id');
        segmentValueId = enclosingSelectId.replace('column', 'value');
        segmentOperatorId = enclosingSelectId.replace('column', 'operator');

        inputSpecifier = inputSpecifiers[characteristicId];
        inputSpecifierHtml = createInput(inputSpecifier, segmentValueId);

        allowedOperatorOptions = valuesToOptionTags(allowedOperators[characteristicId]);

        $('#' + segmentValueId).replaceWith(inputSpecifierHtml);
        $('#' + segmentOperatorId).html(allowedOperatorOptions);
      } 
    });

    $('#add_more_characteristics').click(function(e) {
      e.preventDefault();

      newSelectName = function(partName) {
        return 'segment_' + partName + '[' + nextSegmentationIndex + ']'
      }

      newSelectId = function(partName) {
        return 'segment_' + partName + '_' + nextSegmentationIndex
      }
      
      segmentColumnName = newSelectName('column');
      segmentColumnId = newSelectId('column');
      segmentValueName = newSelectName('value');
      segmentValueId = newSelectId('value');
      segmentOperatorName = newSelectName('operator');
      segmentOperatorId = newSelectId('operator');

      newSelectHtml = [
        '<div class="segmentation-triple-wrapper">',
        '<select name="' + segmentColumnName + '" id="' + segmentColumnId + '" class="segment-column"></select>',
        '<select name="' + segmentOperatorName + '" id="' + segmentOperatorId + '" class="segment-operator"></select>',
        '<select name="' + segmentValueName + '" id="' + segmentValueId + '" class="segment-value"></select>',
        '</div>'
      ].join('');

      $('#segmentation_parameters').append(newSelectHtml);
      $('#' + segmentColumnId).append(characteristicSelectHtml).data('value_select_id', segmentValueId);
      
      nextSegmentationIndex += 1;
    });

    $('#segmentation-form input[type=submit]').click(function(e) {
      e.preventDefault();

      $('#find-segment-spinner').show();

      segmentationForm = $('#segmentation-form');
      requestUrl = segmentationForm.attr('action') + '.js';
      requestParams = segmentationForm.serialize();

      $.post(requestUrl, 
             requestParams, 
             function(data) {
               $('#find-segment-spinner').hide();
               $('#segmentation-results').replaceWith(data)
             },
             'html');
    });
  <% end %>
<% end %>
